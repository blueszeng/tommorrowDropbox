{"version":3,"sources":["dbmodelmanger.coffee"],"names":[],"mappings":"AAAA,IAAA;;AAAA,CAAA,GAAI,OAAA,CAAQ,YAAR;;AACJ,MAAA,GAAS,OAAA,CAAQ,aAAR;;AACH;EACS,uBAAA;IACX,IAAC,CAAA,KAAD,GAAS;IACT,IAAC,CAAA,KAAD,GAAS;IACT,IAAC,CAAA,OAAD,GAAY,OAAA,CAAQ,oBAAR;IACZ,IAAC,CAAA,UAAD,GAAc,SAAA;AACZ,UAAA;AAAA;AAAA;WAAA,aAAA;;qBACE,IAAC,CAAA,KAAM,CAAA,MAAA,CAAP,GAAiB;AADnB;;IADY;IAGd,IAAC,CAAA,UAAD,CAAA;EAPW;;0BASb,MAAA,GAAQ,SAAC,MAAD,EAAS,QAAT;IACN,IAAG,CAAI,CAAC,CAAC,QAAF,CAAW,QAAA,CAAS,CAAI,CAAC,CAAC,UAAF,CAAa,QAAb,CAAb,CAAX,CAAP;MACM,IAAA,KAAA,CAAM,sBAAN,EADN;;IAEA,IAAI,IAAC,CAAA,KAAM,CAAA,MAAA,CAAX;MACE,IAAC,CAAA,KAAM,CAAA,MAAA,EADT;;WAEA,IAAC,CAAA,KAAM,CAAA,MAAA,CAAP,GAAiB;EALX;;0BAOR,GAAA,GAAK,SAAC,SAAD,EAAY,MAAZ;IACH,MAAA,GAAY,MAAH,GAAe,MAAf,GAA4B,MAAM,CAAC,EAAE,CAAC;IAC/C,IAAG,CAAI,CAAC,CAAC,QAAF,CAAW,MAAA,IAAW,CAAI,CAAC,CAAC,QAAF,CAAW,SAAX,CAA1B,CAAP;MACM,IAAA,KAAA,CAAM,sBAAN,EADN;;IAEA,IAAG,CAAI,IAAC,CAAA,KAAM,CAAA,MAAA,CAAd;MACM,IAAA,KAAA,CAAM,sBAAN,EADN;;IAEA,IAAG,IAAC,CAAA,KAAM,CAAA,SAAA,CAAV;AACE,aAAO,IAAC,CAAA,KAAM,CAAA,SAAA,EADhB;;WAEA,IAAC,CAAA,KAAM,CAAA,SAAA,CAAP,GACM,IAAA,IAAC,CAAA,KAAM,CAAA,MAAA,CAAP,CAAe,SAAf,EAA0B,MAA1B;EATH;;;;;;AAYP,MAAM,CAAC,OAAP,GACM,IAAA,aAAA,CAAA","file":"dbmodelmanger.js","sourceRoot":"/source/","sourcesContent":["_ = require 'underscore'\nconfig = require './../config'\nclass DBModelManger\n  constructor: () ->\n    @stack = {}\n    @cache = {}\n    @configs =  require './../config/dbbind'\n    @initConfig = () ->\n      for dbType, dbFun of @configs\n        @stack[dbType] = dbFun\n    @initConfig()\n\n  inject: (dbType, modelFun) ->\n    if not _.isString dbTypeor not _.isFunction modelFun\n      new Error 'push arguments error'\n    if  @stack[dbType]\n      @stack[dbType]\n    @stack[dbType] = modelFun\n\n  get: (modelName, dbType) ->\n    dbType = if dbType then dbType else  config.db.default_db\n    if not _.isString dbType  or not _.isString modelName\n      new Error 'push arguments error'\n    if not @stack[dbType]\n      new Error ' get error no dbType'\n    if @cache[modelName]\n      return @cache[modelName]\n    @cache[modelName] =\n      new @stack[dbType](modelName, dbType)\n\n\nmodule.exports =\n  new DBModelManger()\n\n\n"]}